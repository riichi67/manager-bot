import discord
import os
from discord.ext import commands, bridge
from webserver import keep_alive

token = os.environ.get("token")
intents = discord.Intents()
intents.message_content = True
bot = bridge.Bot(command_prefix=os.environ.get("prefix"), intents=intents)


@bot.event  # –ó–∞–ø—É—Å–∫ (–∏–Ω—Ñ–æ –≤ –∫–æ–Ω—Å–æ–ª–∏)
async def on_ready():
    print(f'{bot.user.name} –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')


@bot.bridge_command(description='–ó–∞—Å—Ç–∞–≤–∏—Ç –∫–æ–≥–æ —É–≥–æ–¥–Ω–æ –∑–∞–º–æ–ª—á–∞—Ç—å.')  # –ú—å—é—Ç
@commands.has_permissions(administrator=True)
async def mute(ctx, member: discord.Member):
    guild = ctx.guild
    mutedRole = discord.utils.get(guild.roles, name="–£–±–æ—Ä—â–∏–∫")
    if not mutedRole:
        mutedRole = await guild.create_role(name="–£–±–æ—Ä—â–∏–∫")
        for channel in guild.channels:
            await channel.set_permissions(mutedRole,
                                          speak=False,
                                          send_messages=False,
                                          read_message_history=True,
                                          read_messages=False)
    await member.add_roles(mutedRole)
    await ctx.respond(f"–ú—å—é—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫—É {member.mention}!")


@bot.bridge_command(
    description='–õ—é–±–æ–º—É –º–æ–ª—á–∞–Ω–∏—é –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–π—Ç–∏ –∫–æ–Ω–µ—Ü, –Ω–µ —Ç–∞–∫ –ª–∏?')  # –†–∞–∑–º—å—é—Ç
@commands.has_permissions(administrator=True)
async def unmute(ctx, member: discord.Member):
    guild = ctx.guild
    mutedRole = discord.utils.get(guild.roles, name="–£–±–æ—Ä—â–∏–∫")
    if not mutedRole:
        mutedRole = await guild.create_role(name="–£–±–æ—Ä—â–∏–∫")
        for channel in guild.channels:
            await channel.set_permissions(mutedRole,
                                          speak=False,
                                          send_messages=False,
                                          read_message_history=True,
                                          read_messages=False)
    await member.remove_roles(mutedRole)
    await ctx.respond(f"–ú—å—é—Ç —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {member.mention}!")


@mute.error  # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞
async def permserror(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        ctx.respond(
            '–ü—Ä–æ—Å—Ç–∏, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã...')


class MyView(discord.ui.View): # UI-–∫–ª–∞—Å—Å –ø–∏–Ω–≥–∞
    @discord.ui.button(label="–ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞!", style=discord.ButtonStyle.primary, emoji="üèì")
    async def button_callback(self, button, interaction):
        await interaction.response.send_message(f"–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã - {bot.latency} —Å–µ–∫—É–Ω–¥!") 

@bot.bridge_command(description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏–Ω–≥ –±–æ—Ç–∞.") # –ü–∏–Ω–≥
async def ping(ctx):
    await ctx.respond("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∏–Ω–≥–∞ –±–æ—Ç–∞!", view=MyView())

@bot.bridge_command(description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—É–º–º—É –¥–≤—É—Ö —á–∏—Å–µ–ª.")
async def add(ctx, a: int, b: int):
  await ctx.respond(a + b)

@bot.bridge_command(description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–Ω–æ—Å—Ç—å –¥–≤—É—Ö —á–∏—Å–µ–ª.")
async def subtract(ctx, a: int, b: int):
  await ctx.respond(a - b)

@bot.bridge_command(description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª.")
async def multiply(ctx, a: int, b: int):
  await ctx.respond(a + b)

@bot.bridge_command(description="–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∞—Å—Ç–Ω–æ–µ –¥–≤—É—Ö —á–∏—Å–µ–ª.")
async def divide(ctx, a: int, b: int):
  await ctx.respond(a / b)

@bot.event # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–º–∞–Ω–¥—ã
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("–ö–æ–º–∞–Ω–¥–∞ –Ω–∞–±—Ä–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –º–µ–Ω—é —Å–ª—ç—à-–∫–æ–º–∞–Ω–¥!")

keep_alive()
bot.run(token)
